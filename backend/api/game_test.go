package api

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"time"
	"net/url"
	// "fmt"
	"encoding/json"

	"github.com/jak103/usu-gdsf/db"
	"github.com/jak103/usu-gdsf/models"
	"github.com/jak103/usu-gdsf/auth"
	"github.com/stretchr/testify/assert"
	 "github.com/stretchr/testify/require"
	//  "github.com/labstack/echo/v4"
)

// func AssertResponseCode(t *testing.T, method string, path string, expectedCode int) bool {
// 	recorder := httptest.NewRecorder()
// 	request := httptest.NewRequest(method, path, nil)
// 	s.echo.ServeHTTP(recorder, request)
// 	return expectedCode == recorder.Code
// }
var (
	_db, _ = db.NewDatabaseFromEnv()

game0 = models.Game{
		Name:         "game0",
		Rating:       3.5,
		TimesPlayed:  1,
		ImagePath:    "path/0",
		Description:  "dummy game 0",
		Developer:    "tester",
		CreationDate: time.Date(1900, 1, 1, 0, 0, 0, 0, time.UTC),
		Version:      "0.0.0",
		Tags:         []string{"tag0", "tag1"},
		Downloads:    35,
		DownloadLink: "dummy.test",
	}

	game1 = models.Game{
		Name:         "game1",
		Rating:       3.9,
		TimesPlayed:  2,
		ImagePath:    "path/1",
		Description:  "dummy game 1",
		Developer:    "tester",
		CreationDate: time.Date(1900, 1, 2, 0, 0, 0, 0, time.UTC),
		Version:      "0.0.1",
		Tags:         []string{"tag1", "tag2"},
		Downloads:    36,
		DownloadLink: "dummy1.test",
	}
)

func TestGame(t *testing.T) {
	recorder := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodGet, "/game", nil)
	GlobalTestServer.echo.ServeHTTP(recorder, request)
	assert.Equal(t, http.StatusOK, recorder.Code)
}

// this will need to be changed eventually. It is looking for response 500 now but when we get the database up it will be 200.

func TestGetAllGames(t *testing.T) {
	e := echo.New()

	recorder := httptest.NewRecorder()
	request := httptest.NewRequest(http.MethodGet, "/game", nil)
	c := e.NewContext(request, recorder)

	if assert.NoError(t, getAllGames(c)) {
		assert.Equal(t, http.StatusOK, recorder.Code)
	}
}

func TestGetGamesWithTags(t *testing.T){

	_db.RemoveGameByTag("tag0");
	_db.RemoveGameByTag("tag1");
	_db.RemoveGameByTag("tag2");
		

	id0, _ := _db.AddGame(game0)
	id1, _ := _db.AddGame(game1)

	game0.Id = id0
	game1.Id = id1

	params := auth.TokenParams{
		Type:      auth.ACCESS_TOKEN,
		UserId:    42,
		UserEmail: "tst@example.com",
	}

	token, _ := auth.GenerateToken(params)
	
	q := make(url.Values)
	q.Set("tags", "tag0-tag1")
	
	req := httptest.NewRequest("http.MethodGet", "/games/tags?" + q.Encode(), nil)
	req.Header.Set("accessToken", token)
	//response writer
	// we can inspect the ResponseRecorder output which is response generated by handler 
	recorder := httptest.NewRecorder()
	c := GlobalTestServer.echo.NewContext(req, recorder) 

    assert.NoError(t, getGamesWithTags(c))
	response:= recorder.Body.String()
	gameObjectResponse := []models.Game{}

	in := []byte(response)
	err := json.Unmarshal(in, &gameObjectResponse)
	if err != nil {
        println(err)
    }
    require.Equal(t, http.StatusOK, recorder.Code)
    
	assert.Equal(t, 2, len(gameObjectResponse));
    _db.RemoveGame(game0)
	_db.RemoveGame(game1)


	// status := recorder.Code
	// if status != http.StatusOK {
 	//        t.Errorf("handler returned wrong status code: got %v want %v",
 	//            status, http.StatusOK)
 	//    }

}